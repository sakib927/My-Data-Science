# -*- coding: utf-8 -*-
"""Rgs project(classification).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18niEV3rV0TveCt2UtZKs9uBEqWONlxBs
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd

data = pd.read_csv('/content/drive/MyDrive/India Agriculture Crop Production.csv')

print(data)

data.head(10)

data.describe()

data.isnull().sum()

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()
X = data.iloc[:,1].values
data.iloc[:,1] = labelencoder.fit_transform(X)
X = X.reshape(-1,1)

data.head()

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()
X = data.iloc[:,2].values
data.iloc[:,2] = labelencoder.fit_transform(X)
X = X.reshape(-1,1)

data.head(20)

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()
X = data.iloc[:,0].values
data.iloc[:,0] = labelencoder.fit_transform(X)
X = X.reshape(-1,1)

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()
X = data.iloc[:,4].values
data.iloc[:,4] = labelencoder.fit_transform(X)
X = X.reshape(-1,1)

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()
X = data.iloc[:,6].values
data.iloc[:,6] = labelencoder.fit_transform(X)
X = X.reshape(-1,1)

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()
X = data.iloc[:,8].values
data.iloc[:,8] = labelencoder.fit_transform(X)
X = X.reshape(-1,1)

data.head()

data.isnull().sum()

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()
X = data.iloc[:,5].values
data.iloc[:,5] = labelencoder.fit_transform(X)
X = X.reshape(-1,1)

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()
X = data.iloc[:,7].values
data.iloc[:,7] = labelencoder.fit_transform(X)
X = X.reshape(-1,1)

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()
X = data.iloc[:,9].values
data.iloc[:,9] = labelencoder.fit_transform(X)
X = X.reshape(-1,1)

from sklearn.preprocessing import LabelEncoder
labelencoder = LabelEncoder()
X = data.iloc[:,3].values
data.iloc[:,3] = labelencoder.fit_transform(X)
X = X.reshape(-1,1)

data.describe()

data.isnull().sum()

data.head(10)

data = data[['State','District','Crop','Year','Season','Area','Area Units','Production','Production Units','Yield']]

X = data[['State','District','Year','Season','Area','Area Units','Production','Yield','Production Units']]
y = data[['Crop']]

#data = data.astype(int)

data

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X,y,test_size=0.25)

from sklearn import preprocessing
from sklearn import utils
lab_enc = preprocessing.LabelEncoder()
print(utils.multiclass.type_of_target(Y_test))

from sklearn.preprocessing import MinMaxScaler
mms = MinMaxScaler()
X_train_min = mms.fit_transform(X_train)
X_test_min = mms.transform(X_test)

from sklearn.preprocessing import StandardScaler
independent_scaler = StandardScaler()
X_train_norm = independent_scaler.fit_transform(X_train)
X_test_norm = independent_scaler.transform(X_test)

from sklearn.decomposition import PCA
pca = PCA(n_components =2) # Convert All the columns into two components/columns
X_train_pca = pca.fit_transform(X_train_norm)
X_train_pca =pca.transform(X_train_norm)
X_test_pca = pca.fit_transform(X_test_norm)
X_test_pca =pca.transform(X_test_norm)
pca.explained_variance_ratio_

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors = 2)
knn.fit(X_train_min , Y_train.values.ravel())
prediction =knn.predict(X_test_min)
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(Y_test, prediction)
print(accuracy)

import matplotlib.pyplot as plt
plt.scatter(Y_test,prediction)
plt.xlabel('Y Test')
plt.ylabel('Prediction Y')

from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
matrix = confusion_matrix(Y_test,prediction, labels=[1,0])
print('Confusion matrix : \n',matrix)

tp, fn, fp, tn = confusion_matrix(Y_test,prediction,labels=[1,0]).reshape(-1)
print('Outcome values : \n', tp, fn, fp, tn)

matrix = classification_report(Y_test,prediction,labels=[1,0])
print('Classification report : \n',matrix)

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors = 1)
knn.fit(X_train_norm , Y_train.values.ravel())
prediction =knn.predict(X_test_norm)
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(Y_test, prediction)
print(accuracy)

import matplotlib.pyplot as plt
plt.scatter(Y_test,prediction)
plt.xlabel('Y Test')
plt.ylabel('Prediction Y')

from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
matrix = confusion_matrix(Y_test,prediction, labels=[1,0])
print('Confusion matrix : \n',matrix)

tp, fn, fp, tn = confusion_matrix(Y_test,prediction,labels=[1,0]).reshape(-1)
print('Outcome values : \n', tp, fn, fp, tn)

matrix = classification_report(Y_test,prediction,labels=[1,0])
print('Classification report : \n',matrix)

'''from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report ,confusion_matrix ,ConfusionMatrixDisplay
lgr = LogisticRegression()
lgr.fit(X_train_min , Y_train.values.ravel())

prediction = lgr.predict(X_test_min)
from sklearn import metrics
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(Y_test,prediction)
print(accuracy)'''

#from sklearn.linear_model import LinearRegression
from sklearn import datasets,linear_model,metrics
from sklearn.metrics import r2_score
import matplotlib.pyplot as plt
from sklearn import datasets,linear_model,metrics
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

lin_reg=linear_model.LinearRegression()
lin_reg.fit(X_train,Y_train)
predicted = lin_reg.predict(X_test)
print('Coefficients are:\n',lin_reg.coef_)
print('\nIntercept : ',lin_reg.intercept_)

print('Variance score: ',lin_reg.score(X_test, Y_test))

print("Mean squared error: %.2f"% mean_squared_error(Y_test, predicted))

print("r2 scroe " ,r2_score(Y_test, predicted))


plt.scatter(Y_test,predicted)
plt.xlabel('Y Test')
plt.ylabel('Predicted Y')

'''from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report ,confusion_matrix ,ConfusionMatrixDisplay
lgr = LogisticRegression()
lgr.fit(X_train_min , Y_train.values.ravel())

prediction = lgr.predict(X_test_min)
from sklearn import metrics
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(Y_test,prediction)
print(accuracy)'''

from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
matrix = confusion_matrix(Y_test,prediction, labels=[1,0])
print('Confusion matrix : \n',matrix)

tp, fn, fp, tn = confusion_matrix(Y_test,prediction,labels=[1,0]).reshape(-1)
print('Outcome values : \n', tp, fn, fp, tn)

matrix = classification_report(Y_test,prediction,labels=[1,0])
print('Classification report : \n',matrix)

#navbayes gaussian minmax
from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(X_train_min, Y_train.values.ravel())

prediction = model.predict(X_test_min)
prediction

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(Y_test, prediction)
print(accuracy)

from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
matrix = confusion_matrix(Y_test,prediction, labels=[1,0])
print('Confusion matrix : \n',matrix)

tp, fn, fp, tn = confusion_matrix(Y_test,prediction,labels=[1,0]).reshape(-1)
print('Outcome values : \n', tp, fn, fp, tn)

matrix = classification_report(Y_test,prediction,labels=[1,0])
print('Classification report : \n',matrix)

